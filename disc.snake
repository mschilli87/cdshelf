# cdshelf disc Snakefile
# Copyright (C) 2017  Marcel Schilling
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


#######################
# general information #
#######################

# file:        disc.snake
# created:     2017-03-26
# last update: 2017-10-15
# author:      Marcel Schilling <marcel.schilling@mdc-berlin.de>
# license:     GNU Affero General Public License Version 3 (GNU AGPL v3)
# purpose:     define disc-related rules for Audio CD backup & conversion tool


######################################
# change log (reverse chronological) #
######################################

# 2017-10-15: added pretend_image rule
#             added passing down of open_submission_url parameter
# 2017-08-30: added import of newly created paths module
# 2017-08-29: added passing of variables from one rule to another through
#             (temporary) files
# 2017-04-23: switched to new parameters module to obtain directory parameter
# 2017-03-28: added image rule
# 2017-03-26: added discid rule
#             initial version (device)


############
# includes #
############

# get tmpdir-related rules
include: "tmpdir.snake"


###########
# imports #
###########

# get functions to store (Python) variables in files
import varfiles

# get parameter-related functions
import parameters

# get disc-related functions
import disc

# get path-related functions
import paths


#########
# rules #
#########

rule device:
  input:
    tmpdir = rules.tmpdir.output.tmpdir
  output:
    device_file = temp(varfiles.get_varfile("device",
                                            rules.tmpdir.output.tmpdir))
  run:
    device = disc.get_device(config)
    varfiles.write_varfile(device, output.device_file)

rule discid:
  input:
    tmpdir = rules.tmpdir.output.tmpdir,
    device_file = rules.device.output.device_file
  output:
    discid_file = temp(varfiles.get_varfile("discid",
                                            rules.tmpdir.output.tmpdir))
  run:
    device = varfiles.read_varfile(input.device_file)
    discid = disc.get_disc_id(device)
    varfiles.write_varfile(discid, output.discid_file)

rule directory:
  input:
    tmpdir = rules.tmpdir.output.tmpdir
  output:
    directory_file = temp(varfiles.get_varfile("directory",
                                               rules.tmpdir.output.tmpdir))
  run:
    directory = parameters.get_param("directory", config)
    varfiles.write_varfile(directory, output.directory_file)

rule pretend_image:
  input:
    device_file = rules.device.output.device_file,
    directory_file = rules.directory.output.directory_file
  run:
    device = varfiles.read_varfile(input.device_file)
    basename = paths.get_basename(disc.read_disc_data(device), False)
    directory = varfiles.read_varfile(input.directory_file)
    disc.pretend_image(device, directory + "/bin", basename)

rule image:
  input:
    device_file = rules.device.output.device_file,
    directory_file = rules.directory.output.directory_file
  run:
    device = varfiles.read_varfile(input.device_file)
    open_submission_url = parameters.get_param("open_submission_url", config)
    basename = paths.get_basename(disc.read_disc_data(device),
                                  open_submission_url == "yes")
    directory = varfiles.read_varfile(input.directory_file)
    shell(disc.create_image(device, directory + "/bin", basename))
